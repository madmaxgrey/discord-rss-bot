#!/bin/bash
# Title: discord-rss-bot
# Author: simonizor
# Description: Post RSS feeds to Discord using a webhook
# License: MIT
# Dependencies: rsstail, pandoc, curl

# run a for loop that checks the Pub.date of each feed in RSS_FEEDS
function checkfeeds {
    mkdir -p ~/.cache/discord-rss
    cd ~/.local/share/discord-rss-bot/feeds
    for feed in *; do
        # unset used variables
        unset WEBHOOK_URL FEED_URL FEED_NAME BOT_USERNAME FEED_COLOR AVATAR_URL POST_LINK NEW_POST_LINK
        source ~/.local/share/discord-rss-bot/config
        source ~/.local/share/discord-rss-bot/feeds/"$feed"
        BOT_USERNAME="$(echo "$FEED_NAME" | tr '-' ' ')"
        echo "Checking $BOT_USERNAME..."
        # if last entry from feed stored, get POST_LINK for feed using grep and cut
        if [[ -f "$HOME/.cache/discord-rss/$FEED_NAME" ]]; then
            POST_LINK="$(grep -m1 '^Link:' ~/.cache/discord-rss/$FEED_NAME | cut -f2- -d' ')"
        fi
        # get NEW_POST_LINK for feed using getfeed function, grep, and cut
        NEW_POST_LINK="$(getfeed $FEED_URL | grep -m1 '^Link:' | cut -f2- -d' ')"
        # if NEW_POST_LINK not empty and does not match POST_LINK, write latest entry to ~/.cache/discord-rss/$FEED_NAME
        if [[ ! -z "$NEW_POST_LINK" ]] && [[ ! "$NEW_POST_LINK" == "$POST_LINK" ]]; then
            echo "[$(date +'%D %T')] New post in $BOT_USERNAME"
            getfeed "$FEED_URL" > ~/.cache/discord-rss/"$FEED_NAME"
            # run a for loop to post to multiple webhook urls if present
            for webhook in $(echo "$WEBHOOK_URL" | tr ',' '\n'); do
                postfeed "$webhook"
                # sleep 1 to avoid potentially hitting rate limit
                sleep 1
            done
        fi
    done
    cd
}
# use rsstail to get the latest feed
function getfeed {
    local RSS_URL="$1"
    case "$FEED_NAME" in
        # reverse output for feeds that are weird and backwards
        openSUSE-Factory|openSUSE-Support|openSUSE-Bugs)
            FEED_CONTENT="$(rsstail -1pdlru "$RSS_URL" -n 1 -b $CHARACTER_LIMIT)"
            ;;
        *)
            FEED_CONTENT="$(rsstail -1pdlu "$RSS_URL" -n 1 -b $CHARACTER_LIMIT)"
            ;;
    esac
    case $? in
        0)
            echo -e "$FEED_CONTENT"
            unset FEED_CONTENT
            ;;
        *)
            echo "null"
            ;;
    esac
}
# create json file containing embed data to upload to webhook URL
function createjson {
cat > /tmp/discord-rss.json << EOL
{
    "username": "bot.sh",
    "avatar_url": "$AVATAR_URL",
    "embeds": [{
        "title": "$FEED_TITLE",
        "url": "$FEED_LINK",
        "description": "$FEED_DESC",
        "color": "$FEED_COLOR",
        "timestamp": "$(date -d "$FEED_DATE" '+%Y-%m-%dT%TZ' -u)",
        "$IMAGE_TYPE": {
          "url": "$THUMBNAIL_URL"
        },
        "author": {
            "name": "$BOT_USERNAME",
            "url": "$FEED_LINK",
            "icon_url": "$AVATAR_URL"
        }
    }]
}

EOL
}
# post feed to Discord using curl
function postfeed {
    local UPLOAD_URL="$1"
    # get feed data for json file using grep and cut
    FEED_TITLE="$(grep -m1 '^Title:' ~/.cache/discord-rss/$FEED_NAME | cut -f2- -d' ' | tr '"' "'" | cut -c-255)"
    FEED_LINK="$(grep -m1 '^Link:' ~/.cache/discord-rss/$FEED_NAME | cut -f2- -d' ')"
    FEED_DATE="$(grep -m1 '^Pub.date:' ~/.cache/discord-rss/$FEED_NAME | cut -f2- -d' ')"
    if [[ -z "$FEED_DATE" ]]; then
        FEED_DATE="$(date -u)"
    fi
    # try to find picture links for thumbnail in embed
    THUMBNAIL_URL="$(rsstail -d1u "$FEED_URL" -n 1 | grep -om1 'http.*\.png\|http.*\.jpg')"
    case "$THUMBNAIL_URL" in
        *youtube*) THUMBNAIL_URL="$(echo "$THUMBNAIL_URL" | cut -f3 -d'"')";;
        *) THUMBNAIL_URL="$(echo "$THUMBNAIL_URL" | cut -f1 -d' ' | tr -d '"')";;
    esac
    # if no THUMBNAIL_URL found, just use 1x1 dummy image
    if [[ "$THUMBNAIL_URL" =~ "@" ]]; then
        THUMBNAIL_URL="https://dummyimage.com/1x1/000/fff"
        IMAGE_TYPE="thumbnail"
    elif [[ -z "$THUMBNAIL_URL" ]]; then
        THUMBNAIL_URL="https://dummyimage.com/1x1/000/fff"
        IMAGE_TYPE="thumbnail"
    else
        if [[ "$FEED_NAME" == "xkcd" ]]; then
            IMAGE_TYPE="image"
        else
            IMAGE_TYPE="thumbnail"
        fi
    fi
    # use grep to get rid of everything except the description then use sed to get rid of the Description label and replace new lines with '\n'
    # also use recode to turn html escapes into normal symbols then use sed to replace a couple of weird ones that recode adds
    case "$FEED_NAME" in
        # get rid of new lines in LWN posts; too messy with them
        LWN)
            FEED_DESC="$(cat ~/.cache/discord-rss/$FEED_NAME | grep -v '^Title:' | grep -v '^Link:' | grep -v '^Pub.date:' | sed "s%Description:%%" | pandoc --wrap=none -s -f html -t markdown | tr -d '\\' | sed 's%{.*}%%g;s%!\[.*\](.*)%%g' | tr '\n' ' ' | tr '"' "'" | tr '\t' ' ' | tr -d '\r' | grep . --color=never)"
            ;;
        # find description from HTML for xkcd
        xkcd)
            FEED_DESC="$(cat ~/.cache/discord-rss/$FEED_NAME | grep -v '^Title:' | grep -v '^Link:' | grep -v '^Pub.date:' | sed "s%Description:%%" | pandoc --wrap=none -s -f html -t markdown | cut -f2- -d'(' | cut -f2- -d' ' | grep '^"' | cut -f2 -d'"')"
            ;;
        *)
            FEED_DESC="$(cat ~/.cache/discord-rss/$FEED_NAME | grep -v '^Title:' | grep -v '^Link:' | grep -v '^Pub.date:' | sed "s%Description:%%" | pandoc --wrap=none -s -f html -t markdown | grep -v '^<\!-' | tr -d '\\' | sed 's%{.*}%%g;s%!\[.*\](.*)%%g' | sed 's%^\[$%%g;s%^Watch video%\[Watch video%g' | grep . --color=never | sed 's%^.*%&\\n%g' | tr -d '\n' | tr '"' "'" | tr '\t' ' ' | tr -d '\r' | grep -v '^:::')"
            ;;
    esac
    # check amount of characters; assume that more than 650 is trunicated and add '[...]'
    if [[ $(echo $FEED_DESC | wc -c) -gt 1100 ]]; then
        FEED_DESC="$(echo "$FEED_DESC" | rev | cut -f2- -d' ' | rev) [...]"
    fi
    # skip posting certain feeds
    case "$FEED_TITLE" in
        # dont post LWN.net paid articles
        \[\$\]*)
            echo "[$(date +'%D %T')] Skipping feed $BOT_USERNAME title $FEED_TITLE"
            ;;
        *)
            if [[ "$FEED_NAME" == "openSUSE-Bugs" ]]; then
                case "$FEED_TITLE" in
                    *New:*)
                        # create json file containing embed data to upload to webhook URL
                        createjson
                        # use curl to send /tmp/discord-rss.json to WEBHOOK_URL
                        curl -iL -X POST -H "Content-Type: application/json" -T "/tmp/discord-rss.json" "$UPLOAD_URL" || echo "Upload failed"
                        echo
                        ;;
                    *) echo "Skipping $BOT_USERNAME non new post $FEED_TITLE" ;;
                esac
            elif [[ "$FEED_NAME" == "openSUSE-Factory" ]] || [[ "$FEED_NAME" == "openSUSE-Support" ]]; then
                case "$FEED_TITLE" in
                    *Re:*) echo "Skipping $BOT_USERNAME non new post $FEED_TITLE" ;;
                    *)
                        if [[ "$FEED_TITLE" =~ "[opensuse-factory] New Tumbleweed snapshot" ]]; then
                            AVATAR_URL="https://cdn.discordapp.com/emojis/426479426474213414.gif?v=1"
                            FEED_DESC='**New openSUSE Tumbleweed snapshot released!  Time to `dup`!**'
                        fi
                        # create json file containing embed data to upload to webhook URL
                        createjson
                        # use curl to send /tmp/discord-rss.json to WEBHOOK_URL
                        curl -iL -X POST -H "Content-Type: application/json" -T "/tmp/discord-rss.json" "$UPLOAD_URL" || echo "Upload failed"
                        echo
                        ;;
                esac
            elif [[ "$FEED_NAME" == "LKML.ORG" ]]; then
                case "$FEED_TITLE" in
                    Re:*) echo "Skipping $BOT_USERNAME non new post $FEED_TITLE" ;;
                    *)
                        # create json file containing embed data to upload to webhook URL
                        createjson
                        # use curl to send /tmp/discord-rss.json to WEBHOOK_URL
                        curl -iL -X POST -H "Content-Type: application/json" -T "/tmp/discord-rss.json" "$UPLOAD_URL" || echo "Upload failed"
                        echo
                        ;;
                esac
            else
                # create json file containing embed data to upload to webhook URL
                createjson
                # use curl to send /tmp/discord-rss.json to WEBHOOK_URL
                curl -iL -X POST -H "Content-Type: application/json" -T "/tmp/discord-rss.json" "$UPLOAD_URL" || echo "Upload failed"
                echo
            fi
            ;;
    esac
    # rm -f /tmp/discord-rss.json
    # unset used variables
    unset FEED_TITLE FEED_LINK FEED_DESC THUMBNAIL_URL
}
# create config if not found
if [[ ! -d "$HOME/.local/share/discord-rss-bot/feeds" ]] || [[ ! -f "$HOME/.local/share/discord-rss-bot/config" ]]; then
mkdir -p ~/.local/share/discord-rss-bot/feeds
cat > ~/.local/share/discord-rss-bot/config << EOF
# default webhook url to use for feeds.
# if webhook url is set in feed config file, that url will be used instead
WEBHOOK_URL="https://discordapp.com/api/webhooks/channelidhere/tokenhere?wait=true"
# time to sleep between feed check cycles
RSS_CHECK_TIME=180
# max amount of characters to be sent in embed description (Discord's max is 2048)
CHARACTER_LIMIT=1800
EOF
fi
# create example feed config and exit if none exist
if [[ $(ls -Cw1 ~/.local/share/discord-rss-bot/feeds | wc -l) -eq 0 ]]; then
cat > ~/.local/share/discord-rss-bot/Example-Feed << EOF
# webhook url to use for this feed; leave blank to use default
WEBHOOK_URL=""
# must be a valid RSS feed that is readable by 'rsstail'
FEED_URL="https://www.phoronix.com/rss.php"
# will be used as the bot's username when posting; '-' in the 'name' will be replaced with a space
FEED_NAME="Phoronix-News"
# 'color' must be in decimal format; see https://www.mathsisfun.com/hexadecimal-decimal-colors.html
FEED_COLOR=6523985
# 'avatar_url' must be a valid image acceptable for Discord avatars
AVATAR_URL="https://raw.githubusercontent.com/simoniz0r/discord-rss-bot/master/avatars/phoronix.png"
EOF
echo "No feeds found in '~/.local/share/discord-rss-bot/feeds'; see example in '~/.local/share/discord-rss-bot/Example-Feed'"
exit 0
fi

source ~/.local/share/discord-rss-bot/config
# start while loop that runs every RSS_CHECK_TIME seconds
CURRENT_LOOP=$RSS_CHECK_TIME
while true; do
    if [[ "$CURRENT_LOOP" == "$RSS_CHECK_TIME" ]]; then
        echo "[$(date +'%D %T')] Checking RSS feeds..."
        checkfeeds
        echo "[$(date +'%D %T')] Done checking RSS feeds"
        echo "[$(date +'%D %T')] Sleeping for $RSS_CHECK_TIME seconds..."
        CURRENT_LOOP=0
    else
        sleep 1
        ((CURRENT_LOOP++))
    fi
done
echo ""
exit 0
